<?xml version="1.0" encoding="UTF-8"?>
        <!-- status : 指定log4j本身的打印日志的级别.ALL< Trace < DEBUG < INFO < WARN < ERROR
        < FATAL < OFF。 monitorInterval : 用于指定log4j自动重新配置的监测间隔时间，单位是s,最小是5s. -->
<Configuration status="DEBUG" monitorInterval="30">
<Properties>
    <!-- 配置日志文件输出目录 ${sys:user.home} -->
    <!--共有8个级别，按照从低到高为：All < Trace < Debug < Info < Warn < Error < Fatal < OFF.
        All:最低等级的，用于打开所有日志记录.
        Trace:是追踪，就是程序推进以下，你就可以写个trace输出，所以trace应该会特别多，不过没关系，我们可以设置最低日志级别不让他输出.
        Debug:指出细粒度信息事件对调试应用程序是非常有帮助的.
        Info:消息在粗粒度级别上突出强调应用程序的运行过程.
        Warn:输出警告及warn以下级别的日志.
        Error:输出错误信息日志.
        Fatal:输出每个严重的错误事件将会导致应用程序的退出的日志.
        OFF:最高等级的，用于关闭所有日志记录-->
    <Property name="LOG_HOME"><!--/home/liuhua/gongzuokongjian1/idea/TestDataCom/-->logs</Property>
    <property name="ERROR_LOG_FILE_NAME"><!--/home/liuhua/gongzuokongjian1/idea/TestDataCom/logs-->${LOG_HOME}/error</property>
    <property name="WARN_LOG_FILE_NAME"><!--/home/liuhua/gongzuokongjian1/idea/TestDataCom/logs-->${LOG_HOME}/warn</property>
    <property name="INFO_LOG_FILE_NAME"><!--/home/liuhua/gongzuokongjian1/idea/TestDataCom/logs-->${LOG_HOME}/info</property>
    <property name="DEBUG_LOG_FILE_NAME"><!--/home/liuhua/gongzuokongjian1/idea/TestDataCom/logs-->${LOG_HOME}/debug</property>

    <property name="PATTERN">%d{yyyy-MM-dd HH:mm:ss.SSS} [%M-%L-%t] %-5level %logger{36} - %msg%n
    </property>
    <!-- <property name="PATTERN">%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n
    </property>-->
</Properties>

<Appenders>
    <!--这个输出控制台的配置 -->
    <Console name="Console" target="SYSTEM_OUT" >
        <!-- 控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch) -->
        <ThresholdFilter level="DEBUG" onMatch="ACCEPT" onMismatch="DENY"/>
        <!-- 输出日志的格式 -->
        <!--
            %d{yyyy-MM-dd HH:mm:ss, SSS} : 日志生产时间
            %p : 日志输出格式
            %c : logger的名称
            %m : 日志内容，即 logger.info("message")
            %n : 换行符
            %C : Java类名
            %L : 日志输出所在行数
            %M : 日志输出所在方法名
            hostName : 本地机器名
            hostAddress : 本地ip地址 -->
        <PatternLayout
                pattern="${PATTERN}"/>
    </Console>

    <!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用 -->
    <!--append为TRUE表示消息增加到指定文件中，false表示消息覆盖指定的文件内容，默认值是true -->
    <File name="log" fileName="${LOG_HOME}/test.log" append="false">
        <PatternLayout
                pattern="${PATTERN}"/>
    </File>
    <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，
    则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->
    <RollingFile name="RollingFileDebug" fileName="${DEBUG_LOG_FILE_NAME}/debug.log"
                 filePattern="${DEBUG_LOG_FILE_NAME}/$${date:yyyy-MM}/debug-%d{yyyy-MM-dd}-%i.log">
        <Filters>
            <!--设置只输出级别为debug的日志-->
            <ThresholdFilter level="debug"/>
            <ThresholdFilter level="info" onMatch="DENY" onMismatch="NEUTRAL"/>
        </Filters>
        <!--            <ThresholdFilter level="debug" onMatch="ACCEPT"
                                     onMismatch="DENY"/>-->
        <PatternLayout
                pattern="${PATTERN}"/>
        <Policies>
            <TimeBasedTriggeringPolicy/>
            <SizeBasedTriggeringPolicy size="50 kB"/>
        </Policies>
        <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 -->
        <!--<DefaultRolloverStrategy max="20"/>-->
        <DefaultRolloverStrategy max="20">
            <Delete basePath="${DEBUG_LOG_FILE_NAME}" maxDepth="2">
                <IfFileName glob="*/debug-*.log">
                    <IfLastModified age="7d">
                        <IfAny>
                            <IfAccumulatedFileSize exceeds="10 GB" />
                            <IfAccumulatedFileCount exceeds="10" />
                        </IfAny>
                    </IfLastModified>
                </IfFileName>
            </Delete>
        </DefaultRolloverStrategy>
    </RollingFile>

    <RollingFile name="RollingFileInfo" fileName="${INFO_LOG_FILE_NAME}/info.log"
                 filePattern="${INFO_LOG_FILE_NAME}/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log">
        <Filters>
            <!--设置只输出级别为info的日志-->
            <ThresholdFilter level="info"/>
            <ThresholdFilter level="warn" onMatch="DENY" onMismatch="NEUTRAL"/>
        </Filters>
        <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
        <!--<ThresholdFilter level="info" onMatch="ACCEPT"
                         onMismatch="DENY"/>-->
        <PatternLayout
                pattern="${PATTERN}"/>
        <Policies>
            <!-- 基于时间的滚动策略，interval属性用来指定多久滚动一次，默认是1 hour。 modulate=true用来调整时间：比如现在是早上3am，interval是4，那么第一次滚动是在4am，接着是8am，12am...而不是7am. -->
            <!-- 关键点在于 filePattern后的日期格式，以及TimeBasedTriggeringPolicy的interval，
            日期格式精确到哪一位，interval也精确到哪一个单位 -->
            <!-- log4j2的按天分日志文件 : info-%d{yyyy-MM-dd}-%i.log-->
            <!--<TimeBasedTriggeringPolicy interval="1" modulate="true"/>-->
            <TimeBasedTriggeringPolicy/>
            <!-- SizeBasedTriggeringPolicy:Policies子节点， 基于指定文件大小的滚动策略，size属性用来定义每个日志文件的大小. -->
            <SizeBasedTriggeringPolicy size="50 kB" />
        </Policies>
        <DefaultRolloverStrategy max="20">
            <Delete basePath="${INFO_LOG_FILE_NAME}" maxDepth="2">
                <IfFileName glob="*/info-*.log">
                    <IfLastModified age="7d">
                        <IfAny>
                            <IfAccumulatedFileSize exceeds="10 GB" />
                            <IfAccumulatedFileCount exceeds="10" />
                        </IfAny>
                    </IfLastModified>
                </IfFileName>
            </Delete>
        </DefaultRolloverStrategy>
    </RollingFile>

    <RollingFile name="RollingFileWarn" fileName="${WARN_LOG_FILE_NAME}/warn.log"
                 filePattern="${WARN_LOG_FILE_NAME}/$${date:yyyy-MM}/warn-%d{yyyy-MM-dd}-%i.log">
        <Filters>
            <!--设置只输出级别为WARN的日志-->
            <ThresholdFilter level="warn"/>
            <ThresholdFilter level="error" onMatch="DENY" onMismatch="NEUTRAL"/>
        </Filters>
        <!--<ThresholdFilter level="warn" onMatch="ACCEPT"
                         onMismatch="DENY"/>-->
        <PatternLayout
                pattern="${PATTERN}"/>
        <Policies>
            <TimeBasedTriggeringPolicy/>
            <SizeBasedTriggeringPolicy size="50 kB"/>
        </Policies>
        <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 -->
        <DefaultRolloverStrategy max="20">
            <Delete basePath="${WARN_LOG_FILE_NAME}" maxDepth="2">
                <IfFileName glob="*/warn-*.log">
                    <IfLastModified age="7d">
                        <IfAny>
                            <IfAccumulatedFileSize exceeds="10 GB" />
                            <IfAccumulatedFileCount exceeds="10" />
                        </IfAny>
                    </IfLastModified>
                </IfFileName>
            </Delete>
        </DefaultRolloverStrategy>
    </RollingFile>

    <RollingFile name="RollingFileError" fileName="${ERROR_LOG_FILE_NAME}/error.log"
                 filePattern="${ERROR_LOG_FILE_NAME}/$${date:yyyy-MM}/error-%d{yyyy-MM-dd-HH-mm}-%i.log">
        <Filters>
            <!--设置只输出级别为error的日志-->
            <ThresholdFilter level="error"/>
            <!--<ThresholdFilter level="error" onMatch="DENY" onMismatch="NEUTRAL"/>-->
        </Filters>
        <!--<ThresholdFilter level="error" onMatch="ACCEPT"
                         onMismatch="DENY"/>-->
        <PatternLayout
                pattern="${PATTERN}"/>
        <Policies>
            <!-- log4j2的按分钟 分日志文件 : warn-%d{yyyy-MM-dd-HH-mm}-%i.log-->
            <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
            <!-- <SizeBasedTriggeringPolicy size="10 MB" /> -->
        </Policies>
        <DefaultRolloverStrategy max="20">
            <Delete basePath="${ERROR_LOG_FILE_NAME}" maxDepth="2">
                <IfFileName glob="*/error-*.log">
                    <IfLastModified age="7d">
                        <IfAny>
                            <IfAccumulatedFileSize exceeds="10 GB" />
                            <IfAccumulatedFileCount exceeds="10" />
                        </IfAny>
                    </IfLastModified>
                </IfFileName>
            </Delete>
        </DefaultRolloverStrategy>
    </RollingFile>


</Appenders>


<!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
<loggers>
    <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
    <logger name="org.springframework" level="INFO"></logger>
    <logger name="org.mybatis" level="DEBUG"></logger>
    <root level="DEBUG">
        <appender-ref ref="Console"/>
        <appender-ref ref="log"/>
        <appender-ref ref="RollingFileDebug"/>
        <appender-ref ref="RollingFileInfo"/>
        <appender-ref ref="RollingFileWarn"/>
        <appender-ref ref="RollingFileError"/>
    </root>
</loggers>
</Configuration>
